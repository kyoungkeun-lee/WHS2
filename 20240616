{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPLkHIp1XO9RLWRpX+8N5yr",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kyoungkeun-lee/WHS2/blob/main/20240616\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from datetime import datetime, timedelta\n",
        "import random\n",
        "\n",
        "# NSL-KDD 데이터셋 로드\n",
        "file_path = '/content/KDDTrain+.txt'  # 파일 경로를 실제 경로로 변경하세요\n",
        "columns = [\"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\",\n",
        "           \"urgent\", \"hot\", \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\",\n",
        "           \"num_root\", \"num_file_creations\", \"num_shells\", \"num_access_files\", \"num_outbound_cmds\",\n",
        "           \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\",\n",
        "           \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\",\n",
        "           \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\",\n",
        "           \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n",
        "           \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"label\"]\n",
        "try:\n",
        "    df = pd.read_csv(file_path, names=columns)\n",
        "except pd.errors.ParserError as e:\n",
        "    print(f\"Error reading CSV: {e}\")\n",
        "    # Print the problematic line for inspection\n",
        "    with open(file_path, 'r') as f:\n",
        "        for i, line in enumerate(f):\n",
        "            if i == 20734:  # Line numbers are zero-based in Python\n",
        "                print(f\"Problematic line: {line}\")\n",
        "                break\n",
        "    # Exit to avoid further errors\n",
        "    exit()\n",
        "# AWS WAF 로그 형식에 맞게 변환\n",
        "def map_to_waf_log(row):\n",
        "    # 예제 데이터 생성\n",
        "    timestamp = (datetime.now() - timedelta(minutes=random.randint(0, 60))).isoformat() + \"Z\"\n",
        "    action = 'ALLOW' if row['label'] == 'normal' else 'BLOCK'\n",
        "    httpSourceId = f\"192.168.{random.randint(0, 255)}.{random.randint(0, 255)}\"\n",
        "    httpRequest_method = 'GET' if row['protocol_type'] == 'tcp' else 'POST'\n",
        "    httpRequest_uri = f\"/{row['service']}\"\n",
        "    httpRequest_headers = {'User-Agent': 'Mozilla/5.0'}\n",
        "    terminatingRuleId = f\"rule_{row['flag']}\"\n",
        "    terminatingRuleType = 'REGULAR' if row['label'] != 'normal' else 'RATE_BASED'\n",
        "    ruleGroupList = [f\"group_{row['service']}\"]\n",
        "    responseCodeSent = 403 if row['label'] != 'normal' else 200\n",
        "\n",
        "    return {\n",
        "        'timestamp': timestamp,\n",
        "        'action': action,\n",
        "        'httpSourceId': httpSourceId,\n",
        "        'httpRequest.method': httpRequest_method,\n",
        "        'httpRequest.uri': httpRequest_uri,\n",
        "        'httpRequest.headers': httpRequest_headers,\n",
        "        'terminatingRuleId': terminatingRuleId,\n",
        "        'terminatingRuleType': terminatingRuleType,\n",
        "        'ruleGroupList': ruleGroupList,\n",
        "        'responseCodeSent': responseCodeSent\n",
        "    }\n",
        "\n",
        "# NSL-KDD 데이터셋을 AWS WAF 로그 형식으로 변환\n",
        "waf_logs = df.apply(map_to_waf_log, axis=1)\n",
        "waf_logs_df = pd.DataFrame(list(waf_logs))\n",
        "\n",
        "# 변환된 데이터 확인\n",
        "print(waf_logs_df.head())\n",
        "\n",
        "# 변환된 데이터를 CSV 파일로 저장\n",
        "waf_logs_df.to_csv('waf_logs.csv', index=False)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ARbh0qX-Tjjn",
        "outputId": "e24f45df-e46b-4ec4-e79b-0c8c30c0a380"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "                     timestamp action     httpSourceId httpRequest.method  \\\n",
            "0  2024-06-16T01:12:59.669248Z  BLOCK  192.168.219.147               POST   \n",
            "1  2024-06-16T00:25:59.677524Z  BLOCK     192.168.6.96               POST   \n",
            "2  2024-06-16T00:35:59.677621Z  BLOCK  192.168.104.209               POST   \n",
            "3  2024-06-16T00:38:59.677679Z  BLOCK  192.168.214.170               POST   \n",
            "4  2024-06-16T01:01:59.677735Z  BLOCK   192.168.134.84               POST   \n",
            "\n",
            "  httpRequest.uri            httpRequest.headers terminatingRuleId  \\\n",
            "0             /SF  {'User-Agent': 'Mozilla/5.0'}          rule_491   \n",
            "1             /SF  {'User-Agent': 'Mozilla/5.0'}          rule_146   \n",
            "2             /S0  {'User-Agent': 'Mozilla/5.0'}            rule_0   \n",
            "3             /SF  {'User-Agent': 'Mozilla/5.0'}          rule_232   \n",
            "4             /SF  {'User-Agent': 'Mozilla/5.0'}          rule_199   \n",
            "\n",
            "  terminatingRuleType ruleGroupList  responseCodeSent  \n",
            "0             REGULAR    [group_SF]               403  \n",
            "1             REGULAR    [group_SF]               403  \n",
            "2             REGULAR    [group_S0]               403  \n",
            "3             REGULAR    [group_SF]               403  \n",
            "4             REGULAR    [group_SF]               403  \n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 라이브러리 설치\n",
        "!pip install pandas scikit-learn xgboost imbalanced-learn\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import datetime\n",
        "\n",
        "# CSV 파일 경로 지정\n",
        "file_path = '/content/waf_logs.csv'  # 실제 경로로 변경하세요\n",
        "\n",
        "# CSV 파일 로드\n",
        "waf_logs_df = pd.read_csv(file_path)\n",
        "\n",
        "# httpSourceId를 숫자로 인코딩\n",
        "le = LabelEncoder()\n",
        "waf_logs_df['httpSourceId'] = le.fit_transform(waf_logs_df['httpSourceId'])\n",
        "\n",
        "# timestamp를 숫자형 특성으로 변환 (예: 유닉스 타임스탬프)\n",
        "waf_logs_df['timestamp'] = pd.to_datetime(waf_logs_df['timestamp']).astype(int) / 10**9\n",
        "\n",
        "# responseCodeSent 특성 제외하고 피처와 레이블 분리\n",
        "X = waf_logs_df[['httpSourceId', 'timestamp']]\n",
        "y = waf_logs_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)  # 'BLOCK'을 1로, 'ALLOW'를 0으로 인코딩\n",
        "\n",
        "# 데이터 균형 확인\n",
        "print(y.value_counts())\n",
        "\n",
        "# 'ALLOW' 값이 없는 경우 데이터를 추가하여 균형 맞추기\n",
        "allow_count = 0\n",
        "if y.value_counts().get(0, 0) == 0:  # 'ALLOW' 값이 없는 경우\n",
        "    allow_rows = []\n",
        "    allow_count = 5000  # 추가할 'ALLOW' 데이터 개수 설정\n",
        "    for _ in range(allow_count):  # 필요한 개수만큼 'ALLOW' 데이터 추가\n",
        "        allow_rows.append({\n",
        "            'httpSourceId': le.fit_transform([f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\"])[0],\n",
        "            'timestamp': datetime.datetime.now().timestamp(),\n",
        "            'action': 'ALLOW'\n",
        "        })\n",
        "    allow_df = pd.DataFrame(allow_rows)\n",
        "    waf_logs_df = pd.concat([waf_logs_df, allow_df], ignore_index=True)\n",
        "\n",
        "# 추가된 ALLOW 데이터 개수 출력\n",
        "print(f'Number of ALLOW samples added: {allow_count}')\n",
        "\n",
        "# 다시 피처와 레이블 분리\n",
        "X = waf_logs_df[['httpSourceId', 'timestamp']]\n",
        "y = waf_logs_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)\n",
        "\n",
        "# 데이터 불균형 해결을 위한 SMOTE 적용\n",
        "smote = SMOTE(random_state=42)\n",
        "X_res, y_res = smote.fit_resample(X, y)\n",
        "\n",
        "# 학습 및 테스트 데이터셋 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
        "\n",
        "# XGBoost 모델 학습\n",
        "model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# 평가\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Classification Report:\\n{report}')\n",
        "\n",
        "# 데이터셋의 균형 확인\n",
        "print(\"Distribution of classes in resampled data:\")\n",
        "print(pd.Series(y_res).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K_IYq4OU_2Xg",
        "outputId": "9e023922-5145-49e0-a49c-663dd48b6137"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "action\n",
            "1    125973\n",
            "Name: count, dtype: int64\n",
            "Number of ALLOW samples added: 5000\n",
            "Accuracy: 1.0\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     37833\n",
            "           1       1.00      1.00      1.00     37751\n",
            "\n",
            "    accuracy                           1.00     75584\n",
            "   macro avg       1.00      1.00      1.00     75584\n",
            "weighted avg       1.00      1.00      1.00     75584\n",
            "\n",
            "Distribution of classes in resampled data:\n",
            "action\n",
            "1    125973\n",
            "0    125973\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 라이브러리 설치\n",
        "!pip install pandas scikit-learn xgboost imbalanced-learn\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import datetime\n",
        "\n",
        "# CSV 파일 경로 지정\n",
        "file_path = '/content/waf_logs.csv'  # 실제 경로로 변경하세요\n",
        "\n",
        "# CSV 파일 로드\n",
        "waf_logs_df = pd.read_csv(file_path)\n",
        "\n",
        "# IP 주소 생성 (기존 데이터를 위해 생성)\n",
        "waf_logs_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(waf_logs_df))]\n",
        "\n",
        "# timestamp를 숫자형 특성으로 변환 (유닉스 타임스탬프)\n",
        "waf_logs_df['timestamp'] = pd.to_datetime(waf_logs_df['timestamp']).view(int) / 10**9\n",
        "\n",
        "# 추가 특성 로드 (원본 NSL-KDD 데이터셋에서 추가 특성을 사용)\n",
        "nsl_kdd_file_path = 'KDDTrain+.txt'  # 실제 경로로 변경하세요\n",
        "columns = [\"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\",\n",
        "           \"urgent\", \"hot\", \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\",\n",
        "           \"num_root\", \"num_file_creations\", \"num_shells\", \"num_access_files\", \"num_outbound_cmds\",\n",
        "           \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\",\n",
        "           \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\",\n",
        "           \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\",\n",
        "           \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n",
        "           \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"label\", \"difficulty\"]\n",
        "\n",
        "nsl_kdd_df = pd.read_csv(nsl_kdd_file_path, names=columns)\n",
        "\n",
        "# 필요한 열만 선택\n",
        "nsl_kdd_df = nsl_kdd_df[[\"duration\", \"protocol_type\", \"service\", \"label\"]]\n",
        "\n",
        "# IP 주소 생성\n",
        "nsl_kdd_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(nsl_kdd_df))]\n",
        "\n",
        "# 'ALLOW'와 'BLOCK' 데이터 생성\n",
        "def create_allow_block_data(row):\n",
        "    timestamp = datetime.datetime.now().timestamp()\n",
        "    if row['label'] == 'normal':\n",
        "        action = 'ALLOW'\n",
        "    else:\n",
        "        action = 'BLOCK'\n",
        "    return [timestamp, action]\n",
        "\n",
        "# 새로운 데이터프레임 생성\n",
        "new_data = nsl_kdd_df.apply(create_allow_block_data, axis=1, result_type='expand')\n",
        "new_data.columns = ['timestamp', 'action']\n",
        "\n",
        "# 기존 nsl_kdd_df와 결합\n",
        "nsl_kdd_df = pd.concat([nsl_kdd_df, new_data], axis=1)\n",
        "\n",
        "# 기존 waf_logs_df와 결합하여 필요한 열 선택\n",
        "combined_df = pd.concat([waf_logs_df, nsl_kdd_df], ignore_index=True)\n",
        "\n",
        "# IP, service, protocol_type를 숫자로 인코딩\n",
        "le_ip = LabelEncoder()\n",
        "le_service = LabelEncoder()\n",
        "le_protocol_type = LabelEncoder()\n",
        "\n",
        "combined_df['IP'] = le_ip.fit_transform(combined_df['IP'])\n",
        "combined_df['service'] = le_service.fit_transform(combined_df['service'])\n",
        "combined_df['protocol_type'] = le_protocol_type.fit_transform(combined_df['protocol_type'])\n",
        "\n",
        "# NaN 값을 평균값으로 대체\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X = combined_df[['service', 'protocol_type', 'duration', 'IP']]\n",
        "X = imputer.fit_transform(X)\n",
        "\n",
        "# 레이블 분리\n",
        "y = combined_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)\n",
        "\n",
        "# 데이터 불균형 해결을 위한 SMOTE 적용\n",
        "smote = SMOTE(random_state=42)\n",
        "X_res, y_res = smote.fit_resample(X, y)\n",
        "\n",
        "# 학습 및 테스트 데이터셋 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
        "\n",
        "# XGBoost 모델 학습\n",
        "model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# 평가\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Classification Report:\\n{report}')\n",
        "\n",
        "# 데이터셋의 균형 확인\n",
        "print(\"Distribution of classes in resampled data:\")\n",
        "print(pd.Series(y_res).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ORadlnF1Ad7r",
        "outputId": "5d4be45e-f9cc-4780-edc3-83fd855467cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Accuracy: 0.9678951264874235\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.96      0.97     55414\n",
            "           1       0.96      0.97      0.97     55348\n",
            "\n",
            "    accuracy                           0.97    110762\n",
            "   macro avg       0.97      0.97      0.97    110762\n",
            "weighted avg       0.97      0.97      0.97    110762\n",
            "\n",
            "Distribution of classes in resampled data:\n",
            "action\n",
            "1    184603\n",
            "0    184603\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 라이브러리 설치\n",
        "!pip install pandas scikit-learn xgboost imbalanced-learn\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import datetime\n",
        "\n",
        "# CSV 파일 경로 지정\n",
        "file_path = '/content/waf_logs.csv'  # 실제 경로로 변경하세요\n",
        "\n",
        "# CSV 파일 로드\n",
        "waf_logs_df = pd.read_csv(file_path)\n",
        "\n",
        "# IP 주소 생성 (기존 데이터를 위해 생성)\n",
        "waf_logs_df['IP'] = [f\"192.168.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(waf_logs_df))]\n",
        "\n",
        "# timestamp를 숫자형 특성으로 변환 (유닉스 타임스탬프)\n",
        "waf_logs_df['timestamp'] = pd.to_datetime(waf_logs_df['timestamp']).view(int) / 10**9\n",
        "\n",
        "# 추가 특성 로드 (원본 NSL-KDD 데이터셋에서 추가 특성을 사용)\n",
        "nsl_kdd_file_path = 'KDDTrain+.txt'  # 실제 경로로 변경하세요\n",
        "columns = [\"duration\", \"protocol_type\", \"service\", \"flag\", \"src_bytes\", \"dst_bytes\", \"land\", \"wrong_fragment\",\n",
        "           \"urgent\", \"hot\", \"num_failed_logins\", \"logged_in\", \"num_compromised\", \"root_shell\", \"su_attempted\",\n",
        "           \"num_root\", \"num_file_creations\", \"num_shells\", \"num_access_files\", \"num_outbound_cmds\",\n",
        "           \"is_host_login\", \"is_guest_login\", \"count\", \"srv_count\", \"serror_rate\", \"srv_serror_rate\",\n",
        "           \"rerror_rate\", \"srv_rerror_rate\", \"same_srv_rate\", \"diff_srv_rate\", \"srv_diff_host_rate\",\n",
        "           \"dst_host_count\", \"dst_host_srv_count\", \"dst_host_same_srv_rate\", \"dst_host_diff_srv_rate\",\n",
        "           \"dst_host_same_src_port_rate\", \"dst_host_srv_diff_host_rate\", \"dst_host_serror_rate\",\n",
        "           \"dst_host_srv_serror_rate\", \"dst_host_rerror_rate\", \"dst_host_srv_rerror_rate\", \"label\", \"difficulty\"]\n",
        "\n",
        "nsl_kdd_df = pd.read_csv(nsl_kdd_file_path, names=columns)\n",
        "\n",
        "# 필요한 열만 선택\n",
        "nsl_kdd_df = nsl_kdd_df[[\"duration\", \"protocol_type\", \"service\", \"label\"]]\n",
        "\n",
        "# IP 주소 생성\n",
        "nsl_kdd_df['IP'] = [f\"192.168.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(nsl_kdd_df))]\n",
        "\n",
        "# 'ALLOW'와 'BLOCK' 데이터 생성\n",
        "def create_allow_block_data(row):\n",
        "    timestamp = datetime.datetime.now().timestamp()\n",
        "    if row['label'] == 'normal':\n",
        "        action = 'ALLOW'\n",
        "    else:\n",
        "        action = 'BLOCK'\n",
        "    return [timestamp, action]\n",
        "\n",
        "# 새로운 데이터프레임 생성\n",
        "new_data = nsl_kdd_df.apply(create_allow_block_data, axis=1, result_type='expand')\n",
        "new_data.columns = ['timestamp', 'action']\n",
        "\n",
        "# 기존 nsl_kdd_df와 결합\n",
        "nsl_kdd_df = pd.concat([nsl_kdd_df, new_data], axis=1)\n",
        "\n",
        "# 기존 waf_logs_df와 결합하여 필요한 열 선택\n",
        "combined_df = pd.concat([waf_logs_df, nsl_kdd_df], ignore_index=True)\n",
        "\n",
        "# IP, service, protocol_type를 숫자로 인코딩\n",
        "le_ip = LabelEncoder()\n",
        "le_service = LabelEncoder()\n",
        "le_protocol_type = LabelEncoder()\n",
        "\n",
        "combined_df['IP'] = le_ip.fit_transform(combined_df['IP'])\n",
        "combined_df['service'] = le_service.fit_transform(combined_df['service'])\n",
        "combined_df['protocol_type'] = le_protocol_type.fit_transform(combined_df['protocol_type'])\n",
        "\n",
        "# NaN 값을 평균값으로 대체\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X = combined_df[['service', 'protocol_type', 'duration', 'IP', 'timestamp']]\n",
        "X = imputer.fit_transform(X)\n",
        "\n",
        "# 레이블 분리\n",
        "y = combined_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)\n",
        "\n",
        "# 데이터 불균형 해결을 위한 SMOTE 적용\n",
        "smote = SMOTE(random_state=42)\n",
        "X_res, y_res = smote.fit_resample(X, y)\n",
        "\n",
        "# 학습 및 테스트 데이터셋 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
        "\n",
        "# XGBoost 모델 학습\n",
        "model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# 평가\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Classification Report:\\n{report}')\n",
        "\n",
        "# 데이터셋의 균형 확인\n",
        "print(\"Distribution of classes in resampled data:\")\n",
        "print(pd.Series(y_res).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x1g3hUxGxRNZ",
        "outputId": "8fc17754-e7e4-4c57-dcb9-d2c609b9af09"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Accuracy: 0.9723822249507954\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.97      0.98      0.97     55414\n",
            "           1       0.98      0.97      0.97     55348\n",
            "\n",
            "    accuracy                           0.97    110762\n",
            "   macro avg       0.97      0.97      0.97    110762\n",
            "weighted avg       0.97      0.97      0.97    110762\n",
            "\n",
            "Distribution of classes in resampled data:\n",
            "action\n",
            "1    184603\n",
            "0    184603\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 라이브러리 설치\n",
        "!pip install pandas scikit-learn xgboost imbalanced-learn\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import datetime\n",
        "\n",
        "# CSV 파일 경로 지정\n",
        "file_path = '/content/waf_logs.csv'  # 실제 경로로 변경하세요\n",
        "\n",
        "# CSV 파일 로드\n",
        "waf_logs_df = pd.read_csv(file_path)\n",
        "\n",
        "# IP 주소 생성 (기존 데이터를 위해 생성)\n",
        "waf_logs_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(waf_logs_df))]\n",
        "\n",
        "# timestamp를 숫자형 특성으로 변환 (유닉스 타임스탬프)\n",
        "waf_logs_df['timestamp'] = pd.to_datetime(waf_logs_df['timestamp']).astype(int) / 10**9\n",
        "\n",
        "# 추가 특성 로드 (원본 NSL-KDD 데이터셋에서 추가 특성을 사용)\n",
        "nsl_kdd_file_path = 'KDDTrain+.txt'  # 실제 경로로 변경하세요\n",
        "columns = [\"duration\", \"protocol_type\", \"service\", \"label\"]\n",
        "\n",
        "nsl_kdd_df = pd.read_csv(nsl_kdd_file_path, names=columns)\n",
        "\n",
        "# 필요한 열만 선택\n",
        "nsl_kdd_df = nsl_kdd_df[[\"label\"]]\n",
        "\n",
        "# IP 주소 생성\n",
        "nsl_kdd_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(nsl_kdd_df))]\n",
        "\n",
        "# 'ALLOW'와 'BLOCK' 데이터 생성\n",
        "def create_allow_block_data(row):\n",
        "    timestamp = datetime.datetime.now().timestamp()\n",
        "    if row['label'] == 'normal':\n",
        "        action = 'ALLOW'\n",
        "    else:\n",
        "        action = 'BLOCK'\n",
        "    return [timestamp, action]\n",
        "\n",
        "# 새로운 데이터프레임 생성\n",
        "new_data = nsl_kdd_df.apply(create_allow_block_data, axis=1, result_type='expand')\n",
        "new_data.columns = ['timestamp', 'action']\n",
        "\n",
        "# 기존 nsl_kdd_df와 결합\n",
        "nsl_kdd_df = pd.concat([nsl_kdd_df, new_data], axis=1)\n",
        "\n",
        "# 기존 waf_logs_df와 결합하여 필요한 열 선택\n",
        "combined_df = pd.concat([waf_logs_df, nsl_kdd_df], ignore_index=True)\n",
        "\n",
        "# 'ALLOW' 값이 없는 경우 'ALLOW' 데이터 추가\n",
        "if combined_df['action'].value_counts().get('ALLOW', 0) == 0:\n",
        "    allow_count = combined_df['action'].value_counts().get('BLOCK', 0)\n",
        "    allow_data = pd.DataFrame({\n",
        "        'IP': [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(allow_count)],\n",
        "        'timestamp': [datetime.datetime.now().timestamp() for _ in range(allow_count)],\n",
        "        'action': ['ALLOW'] * allow_count\n",
        "    })\n",
        "    combined_df = pd.concat([combined_df, allow_data], ignore_index=True)\n",
        "\n",
        "# IP를 숫자로 인코딩\n",
        "le_ip = LabelEncoder()\n",
        "combined_df['IP'] = le_ip.fit_transform(combined_df['IP'])\n",
        "\n",
        "# NaN 값을 평균값으로 대체\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X = combined_df[['IP', 'timestamp']]\n",
        "X = imputer.fit_transform(X)\n",
        "\n",
        "# 레이블 분리\n",
        "y = combined_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)\n",
        "\n",
        "# 데이터 불균형 해결을 위한 SMOTE 적용\n",
        "smote = SMOTE(random_state=42)\n",
        "X_res, y_res = smote.fit_resample(X, y)\n",
        "\n",
        "# 학습 및 테스트 데이터셋 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
        "\n",
        "# XGBoost 모델 학습\n",
        "model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# 평가\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Classification Report:\\n{report}')\n",
        "\n",
        "# 데이터셋의 균형 확인\n",
        "print(\"Distribution of classes in resampled data:\")\n",
        "print(pd.Series(y_res).value_counts())\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_BvAJmTn5Fii",
        "outputId": "52acde8e-8158-443a-e8a5-8ffc8371ab06"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Accuracy: 0.7505159822184589\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       0.67      1.00      0.80     75569\n",
            "           1       1.00      0.50      0.67     75599\n",
            "\n",
            "    accuracy                           0.75    151168\n",
            "   macro avg       0.83      0.75      0.73    151168\n",
            "weighted avg       0.83      0.75      0.73    151168\n",
            "\n",
            "Distribution of classes in resampled data:\n",
            "action\n",
            "1    251946\n",
            "0    251946\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 필요한 라이브러리 설치\n",
        "!pip install pandas scikit-learn xgboost imbalanced-learn\n",
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.impute import SimpleImputer\n",
        "from xgboost import XGBClassifier\n",
        "from sklearn.metrics import classification_report, accuracy_score\n",
        "from imblearn.over_sampling import SMOTE\n",
        "import datetime\n",
        "\n",
        "# CSV 파일 경로 지정\n",
        "file_path = '/content/waf_logs.csv'  # 실제 경로로 변경하세요\n",
        "\n",
        "# CSV 파일 로드\n",
        "waf_logs_df = pd.read_csv(file_path)\n",
        "\n",
        "# IP 주소 생성 (기존 데이터를 위해 생성)\n",
        "waf_logs_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(waf_logs_df))]\n",
        "\n",
        "# timestamp를 숫자형 특성으로 변환 (유닉스 타임스탬프)\n",
        "waf_logs_df['timestamp'] = pd.to_datetime(waf_logs_df['timestamp']).astype(int) / 10**9\n",
        "\n",
        "# 추가 특성 로드 (원본 NSL-KDD 데이터셋에서 추가 특성을 사용)\n",
        "nsl_kdd_file_path = 'KDDTrain+.txt'  # 실제 경로로 변경하세요\n",
        "columns = [\"duration\", \"protocol_type\", \"service\", \"label\"]\n",
        "\n",
        "nsl_kdd_df = pd.read_csv(nsl_kdd_file_path, names=columns)\n",
        "\n",
        "# 필요한 열만 선택\n",
        "nsl_kdd_df = nsl_kdd_df[[\"duration\", \"protocol_type\", \"service\", \"label\"]]\n",
        "\n",
        "# IP 주소 생성\n",
        "nsl_kdd_df['IP'] = [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(len(nsl_kdd_df))]\n",
        "\n",
        "# 'ALLOW'와 'BLOCK' 데이터 생성\n",
        "def create_allow_block_data(row):\n",
        "    timestamp = datetime.datetime.now().timestamp()\n",
        "    if row['label'] == 'normal':\n",
        "        action = 'ALLOW'\n",
        "    else:\n",
        "        action = 'BLOCK'\n",
        "    return [timestamp, action]\n",
        "\n",
        "# 새로운 데이터프레임 생성\n",
        "new_data = nsl_kdd_df.apply(create_allow_block_data, axis=1, result_type='expand')\n",
        "new_data.columns = ['timestamp', 'action']\n",
        "\n",
        "# 기존 nsl_kdd_df와 결합\n",
        "nsl_kdd_df = pd.concat([nsl_kdd_df, new_data], axis=1)\n",
        "\n",
        "# 기존 waf_logs_df와 결합하여 필요한 열 선택\n",
        "combined_df = pd.concat([waf_logs_df, nsl_kdd_df], ignore_index=True)\n",
        "\n",
        "# 'ALLOW' 값이 없는 경우 'ALLOW' 데이터 추가\n",
        "if combined_df['action'].value_counts().get('ALLOW', 0) == 0:\n",
        "    allow_count = combined_df['action'].value_counts().get('BLOCK', 0)\n",
        "    allow_data = pd.DataFrame({\n",
        "        'IP': [f\"{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}.{np.random.randint(0, 255)}\" for _ in range(allow_count)],\n",
        "        'timestamp': [datetime.datetime.now().timestamp() for _ in range(allow_count)],\n",
        "        'duration': [np.random.randint(1, 1000) for _ in range(allow_count)],  # 예시로 임의의 duration 값 생성\n",
        "        'protocol_type': [np.random.choice(nsl_kdd_df['protocol_type'].unique()) for _ in range(allow_count)],\n",
        "        'service': [np.random.choice(nsl_kdd_df['service'].unique()) for _ in range(allow_count)],\n",
        "        'action': ['ALLOW'] * allow_count\n",
        "    })\n",
        "    combined_df = pd.concat([combined_df, allow_data], ignore_index=True)\n",
        "\n",
        "# IP, protocol_type, service를 숫자로 인코딩\n",
        "le_ip = LabelEncoder()\n",
        "le_protocol_type = LabelEncoder()\n",
        "le_service = LabelEncoder()\n",
        "combined_df['IP'] = le_ip.fit_transform(combined_df['IP'])\n",
        "combined_df['protocol_type'] = le_protocol_type.fit_transform(combined_df['protocol_type'])\n",
        "combined_df['service'] = le_service.fit_transform(combined_df['service'])\n",
        "\n",
        "# 데이터 분포 확인\n",
        "print(\"Class distribution before resampling:\")\n",
        "print(combined_df['action'].value_counts())\n",
        "\n",
        "# NaN 값을 평균값으로 대체\n",
        "imputer = SimpleImputer(strategy='mean')\n",
        "X = combined_df[['IP', 'timestamp', 'duration', 'protocol_type', 'service']]\n",
        "X = imputer.fit_transform(X)\n",
        "\n",
        "# 레이블 분리\n",
        "y = combined_df['action'].apply(lambda x: 1 if x == 'BLOCK' else 0)\n",
        "\n",
        "# 데이터 불균형 해결을 위한 SMOTE 적용\n",
        "smote = SMOTE(random_state=42)\n",
        "X_res, y_res = smote.fit_resample(X, y)\n",
        "\n",
        "# 데이터 분포 확인 (리샘플링 후)\n",
        "print(\"Class distribution after resampling:\")\n",
        "print(pd.Series(y_res).value_counts())\n",
        "\n",
        "# 학습 및 테스트 데이터셋 분리\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_res, y_res, test_size=0.3, random_state=42)\n",
        "\n",
        "# XGBoost 모델 학습\n",
        "model = XGBClassifier(use_label_encoder=False, eval_metric='logloss')\n",
        "model.fit(X_train, y_train)\n",
        "\n",
        "# 예측\n",
        "y_pred = model.predict(X_test)\n",
        "\n",
        "# 평가\n",
        "accuracy = accuracy_score(y_test, y_pred)\n",
        "report = classification_report(y_test, y_pred)\n",
        "\n",
        "print(f'Accuracy: {accuracy}')\n",
        "print(f'Classification Report:\\n{report}')\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "D1PZUgjIzTe2",
        "outputId": "2331102c-60ed-47f6-9750-651b697ffe16"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (1.2.2)\n",
            "Requirement already satisfied: xgboost in /usr/local/lib/python3.10/dist-packages (2.0.3)\n",
            "Requirement already satisfied: imbalanced-learn in /usr/local/lib/python3.10/dist-packages (0.10.1)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2023.4)\n",
            "Requirement already satisfied: tzdata>=2022.1 in /usr/local/lib/python3.10/dist-packages (from pandas) (2024.1)\n",
            "Requirement already satisfied: numpy>=1.21.0 in /usr/local/lib/python3.10/dist-packages (from pandas) (1.25.2)\n",
            "Requirement already satisfied: scipy>=1.3.2 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.11.4)\n",
            "Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (1.4.2)\n",
            "Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn) (3.5.0)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.2->pandas) (1.16.0)\n",
            "Class distribution before resampling:\n",
            "action\n",
            "BLOCK    251946\n",
            "ALLOW    251946\n",
            "Name: count, dtype: int64\n",
            "Class distribution after resampling:\n",
            "action\n",
            "1    251946\n",
            "0    251946\n",
            "Name: count, dtype: int64\n",
            "Accuracy: 0.999854466553768\n",
            "Classification Report:\n",
            "              precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00     75569\n",
            "           1       1.00      1.00      1.00     75599\n",
            "\n",
            "    accuracy                           1.00    151168\n",
            "   macro avg       1.00      1.00      1.00    151168\n",
            "weighted avg       1.00      1.00      1.00    151168\n",
            "\n"
          ]
        }
      ]
    }
  ]
}